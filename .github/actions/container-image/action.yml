name: 'Docker image for Prefect Cloud execution layer on Google Cloud'
description: 'Package your dependencies into a Docker image and push it to Google Artifact Registry'

inputs:
  prefect_api_key:
    description: 'Prefect Cloud API key'
    required: true
  prefect_api_url:
    description: 'Prefect Cloud API URL'
    required: true
  gcp_credentials_json:
    description: 'Content of the Service Account JSON key file'
    required: true
  region:
    description: 'GCP region'
    required: true
  artifact_repository:
    description: 'Artifact Registry Repository Name'
    required: true
  image_name:
    description: 'Artifact Registry Image Name'
    required: true
  dockerfile_path:
    description: 'Path and filename of the Dockerfile'
    required: true
    default: Dockerfile
outputs:
  image-uri:
    description: Image URI for the pushed image
    value: ${{ steps.output-image-uri.outputs.image-uri }}

runs:
  using: "composite"
  steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: "${{ inputs.gcp_credentials_json }}"

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - id: set-image
      run: |
        echo "RAW_IMAGE=${{ inputs.region }}-docker.pkg.dev/$GCP_PROJECT/${{ inputs.artifact_repository }}/${{ inputs.image_name }}" >> $GITHUB_ENV
        echo "IMAGE_URI=${{ inputs.region }}-docker.pkg.dev/$GCP_PROJECT/${{ inputs.artifact_repository }}/${{ inputs.image_name }}:$GITHUB_SHA" >> $GITHUB_ENV
        echo "uri=$(echo $IMAGE_URI)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Login to GAR
      uses: docker/login-action@v2
      with:
        registry: '${{ inputs.region }}-docker.pkg.dev'
        username: _json_key
        password: ${{ inputs.gcp_credentials_json }}

    - id: build-image
      run: |
        docker build -q --build-arg PREFECT_API_KEY=${{ inputs.prefect_api_key }} --build-arg PREFECT_API_URL=${{ inputs.prefect_api_url }} -t "${{ env.RAW_IMAGE }}" -f ${{ inputs.dockerfile_path }} .
        docker tag "${{ env.RAW_IMAGE }}" "${{ env.IMAGE_URI }}"
        docker push "${{ env.RAW_IMAGE }}"
        docker push "${{ env.IMAGE_URI }}"
      shell: bash

    - id: output-image-uri
      run: echo "image-uri=$(echo ${{ env.IMAGE_URI }}" >> $GITHUB_OUTPUT
      shell: bash
